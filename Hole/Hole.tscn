[gd_scene load_steps=9 format=2]

[ext_resource path="res://Hole/Hole.glb" type="PackedScene" id=1]
[ext_resource path="res://Hole/Hole.gd" type="Script" id=2]
[ext_resource path="res://circle.tres" type="ArrayMesh" id=3]
[ext_resource path="res://Hole/MeshInstance.gd" type="Script" id=4]

[sub_resource type="CylinderShape" id=1]
radius = 1.17096
height = 0.277489

[sub_resource type="CylinderShape" id=2]
radius = 1.10773
height = 9.13437

[sub_resource type="Shader" id=3]
code = "shader_type spatial;
render_mode blend_mix,depth_draw_alpha_prepass,cull_disabled,unshaded;

uniform float iTime;

vec3 hash3(vec3 p) {
  p = vec3(dot(p, vec3(127.1, 311.7, 74.7)),
    dot(p, vec3(269.5, 183.3, 246.1)),
    dot(p, vec3(113.5, 271.9, 124.6)));

  return -1.0 + 2.0 * fract(sin(p) * 43758.5453123);
}

float noise(vec3 p) {
  vec3 i = floor(p);
  vec3 f = fract(p);

  vec3 u = f * f * (3.0 - 2.0 * f);

  float n0 = dot(hash3(i + vec3(0.0, 0.0, 0.0)), f - vec3(0.0, 0.0, 0.0));
  float n1 = dot(hash3(i + vec3(1.0, 0.0, 0.0)), f - vec3(1.0, 0.0, 0.0));
  float n2 = dot(hash3(i + vec3(0.0, 1.0, 0.0)), f - vec3(0.0, 1.0, 0.0));
  float n3 = dot(hash3(i + vec3(1.0, 1.0, 0.0)), f - vec3(1.0, 1.0, 0.0));
  float n4 = dot(hash3(i + vec3(0.0, 0.0, 1.0)), f - vec3(0.0, 0.0, 1.0));
  float n5 = dot(hash3(i + vec3(1.0, 0.0, 1.0)), f - vec3(1.0, 0.0, 1.0));
  float n6 = dot(hash3(i + vec3(0.0, 1.0, 1.0)), f - vec3(0.0, 1.0, 1.0));
  float n7 = dot(hash3(i + vec3(1.0, 1.0, 1.0)), f - vec3(1.0, 1.0, 1.0));

  float ix0 = mix(n0, n1, u.x);
  float ix1 = mix(n2, n3, u.x);
  float ix2 = mix(n4, n5, u.x);
  float ix3 = mix(n6, n7, u.x);

  float ret = mix(mix(ix0, ix1, u.y), mix(ix2, ix3, u.y), u.z) * 0.5 + 0.5;
  return ret * 2.0 - 1.0;
}

float snoise(vec3 uv) {
  const vec3 s = vec3(1e0, 1e2, 1e3);

  float res = 16.;
  uv *= res;
  vec3 uv0 = floor(mod(uv, res)) * s;
  vec3 uv1 = floor(mod(uv + vec3(1.), res)) * s;

  vec3 f = fract(uv);
  f = f * f * (3.0 - 2.0 * f);

  vec4 v = vec4(uv0.x + uv0.y + uv0.z, uv1.x + uv0.y + uv0.z,
    uv0.x + uv1.y + uv0.z, uv1.x + uv1.y + uv0.z);

  vec4 r = fract(sin(v * 1e-1) * 1e3);
  float r0 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);

  r = fract(sin((v + uv1.z - uv0.z) * 1e-1) * 1e3);
  float r1 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);

  return mix(r0, r1, f.z) * 2. - 1.;
}

float circle( in vec2 uv, float r1, float r2, vec2 ab) {
  float t = r1 - r2;
  float r = r1;
  return smoothstep(ab.x, ab.y, (-length(uv) + r ) - t / 10.0);
}

float circle2( in vec2 uv, float r1, float r2, vec2 ab) {
  float t = r1 - r2;
  float r = r1;
  return smoothstep(ab.x, ab.y, (length(uv) - r) - t / 10.0);
}

vec3 color(vec2 p) {
  vec3 colx = vec3(.120, 0.125, 01.38);
  vec3 coord = vec3(p * 5., iTime * 0.25);
  coord = vec3(atan(p.x, p.y) / 6.2832 + .5, length(p) * .4, .5) + vec3(0., iTime * .05, iTime * .01);
  float nx = abs(snoise(coord));
  float nx2 = 0.5 * abs(snoise(coord * 2.0));
  float nx3 = 0.25 * abs(snoise(coord * 4.0));
  float nx4 = 0.125 * abs(snoise(coord * 6.0));
  nx += nx2 + nx3 + nx4;

float c1=circle(p * 3., 1.2, 0.19, vec2(-0.25, 0.8));
float c2=circle2(p * 3., .3, 0.19, vec2(-0.24645, 01.28));
  float vx = min(1.5*c1,c2);
  float n = nx * vx;
  n *= (100.001);
  n *= vx;
  colx = 0.25 * colx + colx * (0.5 + 0.5 * cos(iTime + p.xyx + vec3(0, 2, 4)));
  colx *= .2 / vec3(nx - nx2, -nx3 + nx, -nx4 + nx);
  vec3 col = colx / max(n,0.001);
  //return col;
  col = clamp(abs(col), vec3(0.), vec3(2.));
  col = 2. * pow(col, vec3(0.645));
  col = col+col * col;
  return min(vec3(1.), pow(col, vec3(2.0))) * (1. - 1.2 * vx);
}

vec4 mi(vec2  uv) {
  uv*=0.9;
  vec3 col = vec3(0.);
  col = color(uv);
  return vec4(col, 1.0);
}

void fragment() {
	vec3 col=mi(UV-0.5).rgb;
	float a=min(dot(col,vec3(1.)),1.);
	ALBEDO=col.rgb;
	ALPHA=a*0.25+0.72;
	
}"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/iTime = 436.011

[node name="Hole" instance=ExtResource( 1 )]
collision_layer = 2
collision_mask = 2
script = ExtResource( 2 )

[node name="Border" parent="." index="0"]
visible = false

[node name="Camera" type="Camera" parent="." index="2"]
transform = Transform( -1, -1.77636e-15, -8.74228e-08, -1.70224e-08, 0.98086, 0.194714, 8.57495e-08, 0.194714, -0.98086, 0, 2.99727, -5.13774 )

[node name="CollisionShape" type="CollisionShape" parent="." index="3"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.154495, 0 )
shape = SubResource( 1 )

[node name="Area" type="Area" parent="." index="4"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.400909, 0 )

[node name="CollisionShape" type="CollisionShape" parent="Area" index="0"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 2.34379, 0 )
shape = SubResource( 2 )

[node name="MeshInstance" type="MeshInstance" parent="." index="5"]
transform = Transform( 1.29254, 0, 0, 0, 1, 0, 0, 0, 1.29254, 0, 0.0124355, 0 )
material_override = SubResource( 4 )
mesh = ExtResource( 3 )
material/0 = null
script = ExtResource( 4 )

[connection signal="body_entered" from="Area" to="." method="_on_Area_body_entered"]
